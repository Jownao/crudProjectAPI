{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o do Projeto CRUD","text":"<p>Este projeto \u00e9 um sistema de CRUD utilizando FastAPI, SQLAlchemy, Pydantic e PostgreSQL.</p>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>O projeto \u00e9 dividido em cinco arquivos principais:</p> <ul> <li>crud.py: L\u00f3gica CRUD (Create, Read, Update, Delete).</li> <li>database.py: Configura\u00e7\u00e3o do banco de dados.</li> <li>models.py: Defini\u00e7\u00e3o do modelo de dados.</li> <li>router.py: Defini\u00e7\u00e3o das rotas da API.</li> <li>schemas.py: Valida\u00e7\u00e3o e serializa\u00e7\u00e3o de dados.</li> </ul>"},{"location":"crud/","title":"crud.py","text":"<p>Fun\u00e7\u00e3o que retorna todos elementos</p> Source code in <code>backend\\crud.py</code> <pre><code>def get_products(db: Session):\n    \"\"\"Fun\u00e7\u00e3o que retorna todos elementos\"\"\"\n    return db.query(ProductModel).all()\n</code></pre> <p>Fun\u00e7\u00e3o que recebe um id e retorna somente ele</p> Source code in <code>backend\\crud.py</code> <pre><code>def get_product_by_id(db: Session, product_id: int):\n    \"\"\"Fun\u00e7\u00e3o que recebe um id e retorna somente ele\"\"\"\n    return db.query(ProductModel).filter(ProductModel.id == product_id).first()\n</code></pre> <p>Fun\u00e7\u00e3o que cria um novo elemento</p> Source code in <code>backend\\crud.py</code> <pre><code>def create_product(db: Session, product: productCreate):\n    \"\"\"Fun\u00e7\u00e3o que cria um novo elemento\"\"\"\n    db_product = ProductModel(**product.model_dump())\n    db.add(db_product)\n    db.commit()\n    db.refresh(db_product)\n    return db_product\n</code></pre> <p>Fun\u00e7\u00e3o que deleta um elemento</p> Source code in <code>backend\\crud.py</code> <pre><code>def delete_product(db: Session, product_id: int):\n    \"\"\"Fun\u00e7\u00e3o que deleta um elemento\"\"\"\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n    if db_product is None:\n        return None  # Retorne None se o produto n\u00e3o for encontrado\n\n    db.delete(db_product)\n    db.commit()\n    return db_product\n</code></pre> <p>Fun\u00e7\u00e3o que atualiza um elemento</p> Source code in <code>backend\\crud.py</code> <pre><code>def update_product(db: Session, product_id: int, product: productUpdate):\n    \"\"\"Fun\u00e7\u00e3o que atualiza um elemento\"\"\"\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n\n    if db_product is None:\n        return None\n\n    if product.nome is not None:\n        db_product.nome = product.nome\n    if product.descricao is not None:\n        db_product.descricao = product.descricao\n    if product.pre\u00e7o is not None:\n        db_product.pre\u00e7o = product.pre\u00e7o\n    if product.categoria is not None:\n        db_product.categoria = product.categoria\n    if product.email_fornecedor is not None:\n        db_product.email_fornecedor = product.email_fornecedor\n\n    db.commit()\n    return db_product\n</code></pre>"},{"location":"database/","title":"database.py","text":"<p>Este arquivo cont\u00e9m a configura\u00e7\u00e3o do banco de dados.</p>"},{"location":"database/#componentes","title":"Componentes","text":""},{"location":"database/#engine","title":"<code>engine</code>","text":"<p>Cria o motor do banco de dados utilizando as credenciais do PostgreSQL.</p>"},{"location":"database/#sessionlocal","title":"<code>SessionLocal</code>","text":"<p>Inst\u00e2ncia de sess\u00e3o usada para interagir com o banco de dados.</p>"},{"location":"database/#base","title":"<code>Base</code>","text":"<p>Classe base para os modelos declarativos do SQLAlchemy.</p>"},{"location":"database/#get_db","title":"<code>get_db()</code>","text":"<p>Fun\u00e7\u00e3o geradora que gerencia as sess\u00f5es do banco de dados.</p> Source code in <code>backend\\database.py</code> <pre><code>def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"models/","title":"models.py","text":"<p>Define o modelo da tabela de produtos no banco de dados.</p>"},{"location":"models/#productmodel","title":"<code>ProductModel</code>","text":"<ul> <li>id: Identificador \u00fanico do produto.</li> <li>nome: Nome do produto.</li> <li>descricao: Descri\u00e7\u00e3o do produto.</li> <li>pre\u00e7o: Pre\u00e7o do produto.</li> <li>categoria: Categoria do produto.</li> <li>email_fornecedor: E-mail do fornecedor.</li> <li>dt_criado: Data e hora em que o produto foi criado.</li> </ul> <p>               Bases: <code>Base</code></p> Source code in <code>backend\\models.py</code> <pre><code>class ProductModel(Base):\n    __tablename__ = \"products\"  # esse ser\u00e1 o nome da tabela\n\n    id = Column(Integer, primary_key=True)\n    nome = Column(String)\n    descricao = Column(String)\n    pre\u00e7o = Column(Float)\n    categoria = Column(String)\n    email_fornecedor = Column(String)\n    dt_criado = Column(DateTime(timezone=True), default=func.now())\n</code></pre>"},{"location":"router/","title":"router.py","text":"<p>Define as rotas da API para gerenciamento de produtos.</p>"},{"location":"router/#endpoints","title":"Endpoints","text":""},{"location":"router/#get-products","title":"<code>GET /products</code>","text":"<p>Retorna a lista de todos os produtos. </p> Source code in <code>backend\\router.py</code> <pre><code>@router.get(\"/products\", response_model=List[productResponse])\ndef get_all_products(db: Session = Depends(get_db)):\n    return get_products(db)\n</code></pre>"},{"location":"router/#get-productsproduct_id","title":"<code>GET /products/{product_id}</code>","text":"<p>Retorna um produto espec\u00edfico com base no ID. </p> Source code in <code>backend\\router.py</code> <pre><code>@router.get(\"/products/{product_id}\", response_model=productResponse)\ndef get_product(product_id: int, db: Session = Depends(get_db)):\n    product = get_product_by_id(db, product_id)\n    if product is None:\n        raise HTTPException(status_code=404, detail=\"O Produto n\u00e3o existe\")\n    return product \n</code></pre>"},{"location":"router/#post-products","title":"<code>POST /products</code>","text":"<p>Cria um novo produto. </p> Source code in <code>backend\\router.py</code> <pre><code>@router.post(\"/products\", response_model=productResponse)\ndef create_new_product(product: productCreate, db: Session = Depends(get_db)):\n    return create_product(db, product)\n</code></pre>"},{"location":"router/#delete-productsproduct_id","title":"<code>DELETE /products/{product_id}</code>","text":"<p>Deleta um produto pelo ID. </p> Source code in <code>backend\\router.py</code> <pre><code>@router.delete(\"/products/{product_id}\", response_model=productResponse)\ndef delete_product_by_id(product_id: int, db: Session = Depends(get_db)):\n    product_db = delete_product(db, product_id)\n    if product_db is None:\n        raise HTTPException(status_code=404, detail=\"O Produto n\u00e3o existe\")\n    return product_db\n</code></pre>"},{"location":"router/#put-productsproduct_id","title":"<code>PUT /products/{product_id}</code>","text":"<p>Atualiza os detalhes de um produto pelo ID. </p> Source code in <code>backend\\router.py</code> <pre><code>@router.put(\"/products/{product_id}\", response_model=productResponse)\ndef update_product_by_id(product_id: int, product: productUpdate, db: Session = Depends(get_db)):\n    product_db = update_product(db, product_id, product)\n    if product_db is None:\n        raise HTTPException(status_code=404, detail=\"O Produto n\u00e3o existe\")\n    return product_db\n</code></pre>"},{"location":"schemas/","title":"schemas.py","text":"<p>Define as valida\u00e7\u00f5es e serializa\u00e7\u00f5es de dados com Pydantic.</p>"},{"location":"schemas/#classes","title":"Classes","text":""},{"location":"schemas/#productbase","title":"<code>ProductBase</code>","text":"<ul> <li>nome: Nome do produto.</li> <li>descricao: Descri\u00e7\u00e3o opcional.</li> <li>pre\u00e7o: Pre\u00e7o do produto.</li> <li>categoria: Categoria do produto.</li> <li>email_fornecedor: E-mail do fornecedor. </li> </ul> <p>               Bases: <code>BaseModel</code></p> Source code in <code>backend\\schemas.py</code> <pre><code>class ProductBase(BaseModel):\n    nome: str\n    descricao: Optional[str] = None\n    pre\u00e7o: PositiveFloat\n    categoria: str\n    email_fornecedor: EmailStr\n\n    @field_validator(\"categoria\")\n    def check_categoria(cls, v):\n        if v in [item.value for item in CategoriaBase]:\n            return v\n        raise ValueError(\"Categoria inv\u00e1lida\")\n</code></pre>"},{"location":"schemas/#productcreate","title":"<code>productCreate</code>","text":"<p>Herdado de <code>ProductBase</code>. Usado para cria\u00e7\u00e3o de produtos. </p> <p>               Bases: <code>ProductBase</code></p> Source code in <code>backend\\schemas.py</code> <pre><code>class productCreate(ProductBase):\n    pass\n</code></pre>"},{"location":"schemas/#productresponse","title":"<code>productResponse</code>","text":"<p>Herdado de <code>ProductBase</code>. Inclui o ID e a data de cria\u00e7\u00e3o. </p> <p>               Bases: <code>ProductBase</code></p> Source code in <code>backend\\schemas.py</code> <pre><code>class productResponse(ProductBase):\n    id: int\n    dt_criado: datetime\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"schemas/#productupdate","title":"<code>productUpdate</code>","text":"<p>Herdado de <code>ProductBase</code>. Todos os campos s\u00e3o opcionais para atualiza\u00e7\u00e3o parcial. </p> <p>               Bases: <code>ProductBase</code></p> Source code in <code>backend\\schemas.py</code> <pre><code>class productUpdate(ProductBase):\n    nome: Optional[str] = None\n    descricao: Optional[str] = None\n    pre\u00e7o: Optional[PositiveFloat] = None\n    categoria: Optional[str] = None\n    email_fornecedor: Optional[EmailStr] = None\n\n    @field_validator(\"categoria\")\n    def check_categoria(cls, v):\n        if v is None:\n            return v\n        if v in [item.value for item in CategoriaBase]:\n            return v\n        raise ValueError(\"Categoria inv\u00e1lida\")\n</code></pre>"},{"location":"schemas/#categoriabase","title":"<code>CategoriaBase</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>backend\\schemas.py</code> <pre><code>class CategoriaBase(Enum):\n    categoria1 = \"Eletr\u00f4nico\"\n    categoria2 = \"Eletrodom\u00e9stico\"\n    categoria3 = \"M\u00f3veis\"\n    categoria4 = \"Roupas\"\n    categoria5 = \"Cal\u00e7ados\"\n</code></pre>"}]}